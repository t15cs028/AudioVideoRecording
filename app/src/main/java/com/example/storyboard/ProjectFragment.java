package com.example.storyboard;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.media.ThumbnailUtils;import android.os.Bundle;import android.provider.MediaStore;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.helper.ItemTouchHelper;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.Toast;import com.example.camera.CameraFragment;import com.example.camera.R;import com.example.database.Block;import com.example.database.Composition;import com.example.database.DBHelper;import com.example.database.Table;import com.example.encoder.MediaPlayFragment;import com.example.encoder.VideoExport;;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import static com.example.database.DBHelper.TAG;import static com.example.database.DBHelper.PATH;import static java.util.Collections.sort;import static java.util.Collections.swap;public class ProjectFragment extends Fragment implements OnRecyclerListener {    private final static int FromPos = 0;    private final static int ToPos = 1;    class DataSet{        String id;        String order;        String name;        String composition_id;        String composition_file;        String description;        String url;        String thumb;    }    private DBHelper dbHelper;    private int projectID;    private View rootView;    private RecyclerView.Adapter adapter;    // url or composition image    private List<Integer> itemImages;    private List<Bitmap> itemThumbnails;    // block name    private List<String> itemNames;    private List<String> itemDetails;    private List<int[]> movePosition;    public static ProjectFragment newInstance(DBHelper dbHelper, int projectID){        ProjectFragment fragment = new ProjectFragment();        fragment.dbHelper = dbHelper;        fragment.projectID = projectID;        return fragment;    }    public ProjectFragment() {    }    @Override    public void onCreate(Bundle saveInstanceState){        super.onCreate(saveInstanceState);        setRetainInstance(true);    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,                             @Nullable Bundle savedInstanceState) {        rootView = inflater.inflate(R.layout.project_main, container, false);        return rootView;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        RecyclerView recyclerView = (RecyclerView) rootView.findViewById(R.id.my_recycler_view);        // use this setting to improve performance if you know that changes        // in content do not change the layout size of the RecyclerView        recyclerView.setHasFixedSize(true);        // use a linear layout manager        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity());        recyclerView.setLayoutManager(layoutManager);        List<DataSet> data = setData();        if(data != null) {            itemImages = new ArrayList<>();            itemThumbnails = new ArrayList<>();            itemNames = new ArrayList<>();            itemDetails = new ArrayList<>();            movePosition = new ArrayList<>();            for (DataSet d : data) {                itemImages.add(Integer.parseInt(d.composition_file));                itemNames.add(d.name);                itemDetails.add(d.description);                System.out.println(d.thumb);                // サムネイルが保存されている                if (!PATH.equals(d.thumb)) {                    File file = new File(d.thumb);                    try(InputStream inputStream0 =                                new FileInputStream(file) ) {                        Bitmap bmp = BitmapFactory.decodeStream(inputStream0);                        itemThumbnails.add(bmp);                    } catch (IOException e) {                        e.printStackTrace();                    }                }                // サムネイルが保存されてないけど，動画ファイルはある                // サムネをセットして，今回はbmpファイルで表示                else if (!PATH.equals(d.url)) {                    ThumbnailUtils tu = new ThumbnailUtils();                    Bitmap bmp                            = tu.createVideoThumbnail(d.url,                            MediaStore.Video.Thumbnails.MINI_KIND);                    String thumb =  (d.url).split("\\.")[0] + ".jpg";                    try{                        FileOutputStream out = new FileOutputStream(thumb);                        bmp.compress(Bitmap.CompressFormat.JPEG, 100, out);                        dbHelper.setField(Table.BLOCK, d.id, Block.THUMB_PATH.getName(), thumb);                    } catch(IOException e){                    }                    itemThumbnails.add(bmp);                }                // そもそも動画撮ってない                else {                    itemThumbnails.add(null);                }            }            // specify an adapter (see also next example)            adapter = new BlockListAdapter(itemImages, itemThumbnails, itemNames, itemDetails, this, getContext());            recyclerView.setAdapter(adapter);            // ItemTouchHelper            ItemTouchHelper itemDecor = new ItemTouchHelper(                    new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP |                            ItemTouchHelper.DOWN, ItemTouchHelper.RIGHT) {                        @Override                        public boolean onMove(RecyclerView recyclerView,                                              RecyclerView.ViewHolder viewHolder,                                              RecyclerView.ViewHolder target) {                            final int fromPos = viewHolder.getAdapterPosition();                            final int toPos = target.getAdapterPosition();                            int positions[] = new int [] {fromPos, toPos};                            movePosition.add(positions);                            adapter.notifyItemMoved(fromPos, toPos);                            return true;                        }                        @Override                        public void onSwiped(RecyclerView.ViewHolder viewHolder,                                             int direction) {                            final int fromPos = viewHolder.getAdapterPosition();                            Log.d(TAG, "delete position => " + fromPos);                            itemImages.remove(fromPos);                            itemNames.remove(fromPos);                            itemDetails.remove(fromPos);                            int positions[] = new int [] {fromPos, -1};                            movePosition.add(positions);                            adapter.notifyItemRemoved(fromPos);                            showToast("success to delete");                        }                    });            itemDecor.attachToRecyclerView(recyclerView);        }        Button newBlock = (Button) rootView.findViewById(R.id.newItem);        Button writeDown = (Button) rootView.findViewById(R.id.writeDown);        android.support.design.widget.FloatingActionButton fastShooting = (android.support.design.widget.FloatingActionButton) rootView.findViewById(R.id.fast_shooting);        newBlock.setOnClickListener(mOnClickListener);        writeDown.setOnClickListener(mOnClickListener);        fastShooting.setOnClickListener(mOnClickListener);    }    @Override    public void onPause() {        super.onPause();        List<DataSet> datas = setData();        updateDataBase(datas);    }    @Override    public void onResume(){        super.onResume();        List<DataSet> datas = setData();        updateDataBase(datas);    }    @Override    public void onRecyclerClicked(View v, int position){        Log.d(TAG, "onListItemClick position => " + position);        List<DataSet> datas = setData();        String blockID = datas.get(position).id;        String path = datas.get(position).url;        updateDataBase(datas);        FragmentManager fragmentManager = getFragmentManager();        if (fragmentManager != null) {            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();            // BackStackを設定            fragmentTransaction.addToBackStack(null);            BlockFragment fragment                    = BlockFragment.newInstance(dbHelper, projectID, Integer.parseInt(blockID));            fragmentTransaction.replace(R.id.container, fragment);            fragmentTransaction.commit();        }    }    @Override    public void onCameraClicked(View v, int position){        List<DataSet> datas = setData();        int blockID = Integer.parseInt(datas.get(position).id);        int compositionID = Integer.parseInt(datas.get(position).composition_id);        updateDataBase(datas);        FragmentManager fragmentManager = getFragmentManager();        if (fragmentManager != null) {            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();            // BackStackを設定            fragmentTransaction.addToBackStack(null);            CameraFragment cameraFragment = CameraFragment.newInstance(dbHelper, blockID, compositionID);            fragmentTransaction.replace(R.id.container, cameraFragment);            fragmentTransaction.commit();        }    }    private View.OnClickListener mOnClickListener            = new View.OnClickListener() {        @Override        public void onClick(View v) {            List<DataSet> datas = setData();            updateDataBase(datas);            switch(v.getId()) {                case R.id.newItem:                    FragmentManager fragmentManager = getFragmentManager();                    if (fragmentManager != null) {                        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();                        // BackStackを設定                        fragmentTransaction.addToBackStack(null);                        CompositionFragment compositionFragment                                = CompositionFragment.newInstance(dbHelper, projectID);                        fragmentTransaction.replace(R.id.container, compositionFragment);                        fragmentTransaction.commit();                    }                    break;                case R.id.writeDown:                    showToast("now writing down...");                    VideoExport videoExport = new VideoExport(getActivity(), dbHelper, projectID);                    if(videoExport.loadInBackground()){                        showToast("success to write down a movie!");                        fragmentManager = getFragmentManager();                        if (fragmentManager != null) {                            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();                            // BackStackを設定                            fragmentTransaction.addToBackStack(null);                            MediaPlayFragment mediaPlayFragment                                    = MediaPlayFragment.newInstance(dbHelper, projectID, Table.PROJECT);                            fragmentTransaction.replace(R.id.container, mediaPlayFragment);                            fragmentTransaction.commit();                        }                    }                    else {                        showToast("error: couldn't write down a movie...");                    }                    break;                case R.id.fast_shooting:                    fragmentManager = getFragmentManager();                    if (fragmentManager != null) {                        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();                        // BackStackを設定                        fragmentTransaction.addToBackStack(null);                        int order = dbHelper.getNumOfRecord(Table.BLOCK,                                Block.PROJECT_ID.getName(), String.valueOf(projectID));                        String compositionID = dbHelper.getColumn(Table.COMPOSITION,                                Composition.ID.getName(), Composition.FILE_ID.getName(),                                String.valueOf(R.mipmap.lattice))[0];                        String[] str =                                new String[]{                                        "id", String.valueOf(order),                                        " ", compositionID,                                        " ", PATH, PATH, String.valueOf(projectID)                                };                        if (!dbHelper.setRecord(Table.BLOCK, str)) {                            showToast("error : Please try again...");                        }                        else {                            int blockID = Integer.parseInt(                                    dbHelper.getColumn(Table.BLOCK, Block.ID.getName(),                                    Block.TURN.getName(), String.valueOf(order))[0]);                            CameraFragment cameraFragment                                    = CameraFragment.newInstance(dbHelper, blockID,                                    Integer.parseInt(compositionID));                            fragmentTransaction.replace(R.id.container, cameraFragment);                            fragmentTransaction.commit();                        }                    }            }        }    };    private void updateDataBase(List<DataSet> datas){        for(int[] i : movePosition){            if(i[ToPos] == -1){                dbHelper.deleteRecord(Table.BLOCK, datas.get(i[FromPos]).id);                datas.remove(i[FromPos]);            }            else {                swap(datas, i[FromPos], i[ToPos]);            }        }        for(int i = 0; i < datas.size(); i++){            dbHelper.setField(Table.BLOCK, datas.get(i).id,                    Block.TURN.getName(), String.valueOf(i));        }        movePosition.clear();    }    private List<DataSet> setData(){        // StroiesID は今回は不要のため，-1        int columns = Block.values().length-1;        int records = 0;        List<String[]> tmp = new ArrayList<String[]>();        Block[] values = Block.values();        for(int i = 0; i < columns; i++){            Block block = values[i];            String [] str                    = dbHelper.getColumn(                    Table.BLOCK, block.getName(),                    Block.PROJECT_ID.getName(), String.valueOf(projectID));            if(str != null) {                records = str.length;                tmp.add(str);            }        }        if(records != -1) {            List<DataSet> datas = new ArrayList<>();            for (int i = 0; i < records; i++) {                DataSet data = new DataSet();                data.id = tmp.get(Block.ID.getNumber())[i];                data.order = tmp.get(Block.TURN.getNumber())[i];                data.name = tmp.get(Block.NAME.getNumber())[i];                data.composition_id = tmp.get(Block.COMPOSITION_ID.getNumber())[i];                data.composition_file = dbHelper.getColumn(                        Table.COMPOSITION, Composition.THUMB_ID.getName(),                        Composition.ID.getName(), data.composition_id)[0];                data.description = tmp.get(Block.DESCRIPTION.getNumber())[i];                data.url = tmp.get(Block.FILE_PATH.getNumber())[i];                data.thumb = tmp.get(Block.THUMB_PATH.getNumber())[i];                datas.add(data);            }            List<DataSet> reArrangeID = reArrangeID(datas);            return reArrangeID;        }        return null;    }    private List<DataSet> reArrangeID(List<DataSet> data) {        int length = data.size();        List<DataSet> rearrage = data;        for(int i = 0; i < length; i++){            int min = i;            for(int j = i; j < length; j++){                if(Integer.parseInt(rearrage.get(min).order)                        > Integer.parseInt(rearrage.get(j).order)) {                    min = j;                }            }            swap(rearrage, i, min);        }        return rearrage;    }    /*     * エラー等のToastを表示する     * str : 表示したいString     */    public void showToast(String str){        Toast toast = Toast.makeText(getActivity(), str, Toast.LENGTH_SHORT);        toast.show();    }}