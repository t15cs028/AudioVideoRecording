package com.example.database;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.database.sqlite.SQLiteDatabase;import android.os.Build;import java.io.File;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;public class DBHelper{    private int id = 0;    public static final String TAG = "DBHelper";    public static final String URL = "new";    public SQLiteDatabase db;    private final DBOpenHelper dbOpenHelper;    public DBHelper(final Context context) {        this.dbOpenHelper = new DBOpenHelper(context);        establishDB();    }    public void readDB(){        if(this.dbOpenHelper != null){            this.db = this.dbOpenHelper.getReadableDatabase();        }    }    public void writeDB(){        if(this.dbOpenHelper != null){            this.db = this.dbOpenHelper.getWritableDatabase();        }    }    private void establishDB(){        if(this.db == null){            this.db = this.dbOpenHelper.getWritableDatabase();        }    }    public void cleanup(){        if(this.db != null){            this.db.close();            this.db = null;        }    }    /**     * Databaseが削除できればtrue。できなければfalse     * @param context     * @return     */    public boolean isDatabaseDelete(final Context context) {        boolean result = false;        if (this.db != null) {            File file = context.getDatabasePath(dbOpenHelper.getDatabaseName());            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                result = this.db.deleteDatabase(file);            }        }        return result;    }    public boolean setRecord(Table table, String[] str){        writeDB();        db.beginTransaction();        final ContentValues values = new ContentValues(1);        switch(table){            case PROJECT:                values.clear();                if(str[Project.ID.getNumber()] != "id"){                    values.put(Project.ID.getName(), str[Project.ID.getNumber()]);                }                values.put(Project.DATE.getName(), str[Project.DATE.getNumber()]);                values.put(Project.NAME.getName(), str[Project.NAME.getNumber()]);                values.put(Project.FILE_URL.getName(), str[Project.FILE_URL.getNumber()]);                break;            case BLOCK:                values.clear();                if(str[Block.ID.getNumber()] != "id"){                    values.put(Block.ID.getName(), str[Block.ID.getNumber()]);                }                values.put(Block.TURN.getName(), Integer.parseInt(str[Block.TURN.getNumber()]));                values.put(Block.NAME.getName(), str[Block.NAME.getNumber()]);                values.put(Block.COMPOSITION_ID.getName(),                        Integer.parseInt(str[Block.COMPOSITION_ID.getNumber()]));                values.put(Block.DESCRIPTION.getName(), str[Block.DESCRIPTION.getNumber()]);                values.put(Block.FILE_URL.getName(), str[Block.FILE_URL.getNumber()]);                values.put(Block.THUMB_URL.getName(), str[Block.THUMB_URL.getNumber()]);                values.put(Block.PROJECT_ID.getName(),                        Integer.parseInt(str[Block.PROJECT_ID.getNumber()]));                break;            case COMPOSITION:                values.clear();                if(str[Composition.ID.getNumber()] != "id"){                    values.put(Composition.ID.getName(), str[Composition.ID.getNumber()]);                }                values.put(Composition.NAME.getName(), str[Composition.NAME.getNumber()]);                values.put(Composition.DESCRIPTION.getName(), str[Composition.DESCRIPTION.getNumber()]);                values.put(Composition.FILE_ID.getName(), str[Composition.FILE_ID.getNumber()]);                if(!str[Composition.REVERSE_ID.getNumber()].equals("symmetry")) {                    values.put(Composition.REVERSE_ID.getName(), str[Composition.REVERSE_ID.getNumber()]);                }                else{                    values.put(Composition.REVERSE_ID.getName(), "-1");                }                values.put(Composition.THUMB_ID.getName(),                        Integer.parseInt(str[Composition.THUMB_ID.getNumber()]));                values.put(Composition.TAG.getName(), str[Composition.TAG.getNumber()]);                break;            case SAMPLE:                values.clear();                if(str[Composition.ID.getNumber()] != "id"){                    values.put(Sample.ID.getName(), str[Sample.ID.getNumber()]);                }                values.put(Sample.FILE_ID.getName(), str[Sample.FILE_ID.getNumber()]);                values.put(Sample.COMPOSITION_ID.getName(),                        Integer.parseInt(str[Sample.COMPOSITION_ID.getNumber()]));                break;        }        db.insert(table.getName(), null, values);        db.setTransactionSuccessful();        db.endTransaction();        db.close();        return true;    }    /**     * 任意のテーブルに新しいレコードをセットする     * number : テーブルの番号     * str    : セットする文字列     * return :     */    /*    public boolean setRecord(int number, String str){        DBTable[] Enum = DBTable.values();        final DBTable num = Enum[number];        writeDB();        db.beginTransaction();        final ContentValues values = new ContentValues(1);        switch(num){            case stories:                String command = "select count(*) from " + dbOpenHelper.getTableName()[number];                readDB();                Cursor c = db.rawQuery(command, null);                c.moveToFirst();                if(c == null){                    return false;                }                id = c.getInt(0);                c.close();                values.clear();                values.put("id", id);                values.put("name", str);                values.put("date", getNowDateTime());                db.insert("stories", null, values);                db.setTransactionSuccessful();                db.endTransaction();                break;            case story:                break;            case composition:                break;        }        db.close();        return true;    }    */    /**     * 任意のテーブルのフィールドに値を挿入     * table : 列挙型テーブル     * primaryKey : プライマリーキー     * column : 挿入したい値のカラムの番号     * value : 挿入したい値     */    public void setField(Table table, String primaryKey, String column, String value){        String command                = "update " + table.getName() + " set " + column                + " = \"" + value + "\" where id = " + primaryKey + ";";        writeDB();        db.execSQL(command);        db.close();    }    /**     * 任意の名前の絵コンテ（作品）が存在するかを返す     * return : true = 存在する　false = 存在しない     *     */    public boolean existProjectName(String name){        String table = Table.PROJECT.getName();        String command = "select count(*) from " + table + " where name = ?" ;        readDB();        Cursor c = db.rawQuery(command, new String[] {name});        c.moveToFirst();        db.close();        if(c == null){            return false;        }        int result = c.getInt(0);        c.close();        if(result == 0){            return false;        }        return true;    }    /**     * レコードの数を返す     * number : テーブルの番号     * return : レコードの数     *     */    public int getNumOfRecord(Table table){        readDB();        int count = 0;        String command = "select count(*) from " + table.getName();        readDB();        Cursor c = db.rawQuery(command, null);        c.moveToFirst();        if(c == null){            return -1;        }        count = c.getInt(0);        db.close();        c.close();        return count;    }    /**     * 条件を満たすレコードの数を返す     * number : テーブルの番号     * conditionColumn : 条件となる部分の列の名前     * condition : 一致してほしい文字列     * return : レコードの数     *     */    public int getNumOfRecord(Table table, String conditionColumn, String condition){        readDB();        int count = 0;        String command                = "select count(*) from " + table.getName()                + " where " + conditionColumn + " = \"" + condition + "\";";        readDB();        Cursor c = db.rawQuery(command, null);        c.moveToFirst();        if(c == null){            return -1;        }        count = c.getInt(0);        db.close();        c.close();        return count;    }    /**     * テーブル内にある任意の列の値をすべて返す     * dbNumber : テーブル番号     * column   : 列の名前     * return   : 列にあるすべての値     */    public String [] getColumn(Table table, String column){        if(getNumOfRecord(table) == 0){            return null;        }        String command = "select " + column + " from " + table.getName() + ";";        int count = getNumOfRecord(table);        readDB();        Cursor c = db.rawQuery(command, null);        if(c == null){            return null;        }        String [] str = new String [count];        boolean notEnd = c.moveToFirst();        int i = 0;        while(notEnd) {            str[i] = c.getString(0);            notEnd = c.moveToNext();            i++;        }        c.moveToFirst();        c.close();        db.close();        return str;    }    /**     * テーブル内にある，条件（イコール）を満たした任意の列の値を返す     * column : 返してほしい列の名前     * conditionColumn : 条件となる部分の列の名前     * condition : 一致してほしい文字列     */    public String [] getColumn(Table table, String column, String conditionColumn, String condition){        if(getNumOfRecord(table) == 0){            return null;        }        String command                = "select " + column + " from " + table.getName()                + " where " + conditionColumn + " = \"" + condition + "\";";        int count = getNumOfRecord(table, conditionColumn, condition);        readDB();        SQLiteCursor c = (SQLiteCursor) db.rawQuery(command, null);        if(c == null){            return null;        }        String [] str = new String [count];        boolean notEnd = c.moveToFirst();        int i = 0;        while(notEnd) {            str[i] = c.getString(0);            notEnd = c.moveToNext();            i++;        }        c.moveToFirst();        c.close();        db.close();        return str;    }    public String [] getRecord(Table table, String primaryKey){        if(getNumOfRecord(table) == 0){            return null;        }        String command                = "select * " + " from " + table.getName()                + " where ID = " + primaryKey + ";";        readDB();        SQLiteCursor c = (SQLiteCursor) db.rawQuery(command, null);        if(c == null){            return null;        }        String [] str = new String [c.getColumnCount()];        // int i = 0;        boolean notEnd = c.moveToFirst();        for(int i = 0; i < c.getColumnCount(); i++) {            str[i] = c.getString(i);        }        c.moveToFirst();        c.close();        db.close();        return str;    }    public void deleteRecord(Table table, String primaryKey){        String command                = "delete from " + table.getName()                + " where ID = " + primaryKey + ";";        writeDB();        db.execSQL(command);        db.close();    }    public void deleteBlockRecord(String primaryKey, String storiesID){        String iDs[]                = getColumn(                Table.BLOCK, Block.ID.getName(),                Block.PROJECT_ID.getName(), String.valueOf(storiesID));        String orders[]                = getColumn(                Table.BLOCK, Block.TURN.getName(),                Block.PROJECT_ID.getName(), String.valueOf(storiesID));        // プライマリーキーが格納されている配列番号        int pointPrimary = 0;        for(int i = 0; i < iDs.length; i++){            if(iDs[i].equals(primaryKey)){                pointPrimary = i;            }        }        writeDB();        for(int i = 0; i < iDs.length; i++) {            if(i == pointPrimary){                continue;            }            if(Integer.parseInt(orders[pointPrimary]) < Integer.parseInt(orders[i])) {                int order = Integer.parseInt(orders[i]) - 1;                setField(Table.BLOCK, iDs[i], Block.TURN.getName(), String.valueOf(order));            }        }        deleteRecord(Table.BLOCK, primaryKey);        db.close();    }    /**     * 現在の日付を返す     * return : 現在の日付     */    public static String getNowDateTime(){        final DateFormat df = new SimpleDateFormat("yyMMdd_HHmmss");        final Date date = new Date(System.currentTimeMillis());        return df.format(date);    }    public void setComposition(){        NewData newData = new NewData();        List<String[]> datas = newData.getCompositionData();        for(int i = 0; i < datas.size(); i++){            setRecord(Table.COMPOSITION, datas.get(i));        }    }    public void setSample(){        NewData newData = new NewData();        List<String[]> datas = newData.getSampleData();        for(int i = 0; i < datas.size(); i++){            setRecord(Table.SAMPLE, datas.get(i));        }    }}